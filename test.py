import taichi as ti
import taichi.math as tm

@ti.func
def streching_force_test(f:ti.template(), x0:ti.template(), x1:ti.template(), ks:float, len:float):
    xi = x0[0]
    yi = x0[1]
    zi = x0[2]
    xj = x1[0]
    yj = x1[1]
    zj = x1[2]
    __53740 = -xj
    __53741 = xi + __53740
    __53743 = __53741 ** 2
    __53744 = -yj
    __53745 = yi + __53744
    __53746 = __53745**2
    __53747 = -zj
    __53748 = zi + __53747
    __53749 = __53748**2
    __53750 = __53743 + __53746 + __53749
    mf0 = -((ks*__53741*(-len + tm.sqrt(__53750)))/(len*tm.sqrt(__53750)))
    assert ti.abs(f[0]-mf0)<1e-10, f'Error when calculating streching force. Thoery: {mf0:.16f}, actual {f[0]:.16f}'

@ti.func
def bending_force_test(f:ti.template(), x0:ti.template(), x1:ti.template(), x2:ti.template(), \
                        theta0:float, theta1:float, omegaBar0:ti.template(), omegaBar1:ti.template(), \
                        u0:ti.template(), u1:ti.template(), v0:ti.template(), v1:ti.template(), b:float, len:float):
    xi = x0[0]
    yi = x0[1]
    zi = x0[2]
    xj = x1[0]
    yj = x1[1]
    zj = x1[2]
    xk = x2[0]
    yk = x2[1]
    zk = x2[2]
    omegaBar11 = omegaBar0[0]
    omegaBar12 = omegaBar0[1]
    omegaBar21 = omegaBar1[0]
    omegaBar22 = omegaBar1[1]
    ux0 = u0[0]
    uy0 = u0[1]
    uz0 = u0[2]
    ux1 = u1[0]
    uy1 = u1[1]
    uz1 = u1[2]
    vx0 = v0[0]
    vy0 = v0[1]
    vz0 = v0[2]
    vx1 = v1[0]
    vy1 = v1[1]
    vz1 = v1[2]
    kb1 = b
    kb2 = b
    __12045 = -xj
    __12046 = xi + __12045
    __12050 = -yj
    __12051 = yi + __12050
    __12047 = -xk
    __12048 = xj + __12047
    __12052 = -yk
    __12053 = yj + __12052
    __12057 = -zj
    __12058 = zi + __12057
    __12064 = -zk
    __12065 = zj + __12064
    __12049 = __12046*__12048
    __12054 = __12051*__12053
    __12055 = __12046**2
    __12056 = __12051**2
    __12059 = __12058**2
    __12060 = __12055 + __12056 + __12059
    __12061 = tm.sqrt(__12060)
    __12062 = __12048**2
    __12063 = __12053**2
    __12066 = __12065**2
    __12067 = __12062 + __12063 + __12066
    __12068 = tm.sqrt(__12067)
    __12069 = __12061*__12068
    __12070 = __12058*__12065
    __12071 = __12049 + __12054 + __12069 + __12070
    __12072 = 1/__12071
    __12075 = -zi
    __12079 = tm.cos(theta0)
    __12081 = tm.sin(theta0)
    __12073 = yk*__12058
    __12074 = yi*__12065
    __12076 = __12075 + zk
    __12077 = yj*__12076
    __12078 = __12073 + __12074 + __12077
    __12080 = vx0*__12079
    __12082 = -(ux0*__12081)
    __12083 = __12080 + __12082
    __12089 = __12057 + zk
    __12092 = vy0*__12079
    __12093 = -(uy0*__12081)
    __12094 = __12092 + __12093
    __12107 = 1/tm.sqrt(__12060)
    __12108 = __12046*__12107*__12068
    __12109 = xj + __12047 + __12108
    __12110 = __12071**-2
    __12085 = __12075 + zj
    __12086 = xk*__12085
    __12087 = zi + __12064
    __12088 = xj*__12087
    __12090 = xi*__12089
    __12091 = __12086 + __12088 + __12090
    __12096 = xk*__12051
    __12097 = xi*__12053
    __12098 = -yi
    __12099 = __12098 + yk
    __12100 = xj*__12099
    __12101 = __12096 + __12097 + __12100
    __12102 = vz0*__12079
    __12103 = -(uz0*__12081)
    __12104 = __12102 + __12103
    __12120 = __12056 + __12059
    __12123 = __12060**-2
    __12116 = vy0*__12051
    __12117 = vz0*__12058
    __12118 = __12116 + __12117
    __12119 = __12046*__12118
    __12121 = -(vx0*__12120)
    __12122 = __12119 + __12121
    __12125 = uy0*__12051
    __12126 = uz0*__12058
    __12127 = __12125 + __12126
    __12128 = __12046*__12127
    __12129 = -(ux0*__12120)
    __12130 = __12128 + __12129
    __12145 = ux0*__12079
    __12146 = vx0*__12081
    __12147 = __12145 + __12146
    __12149 = uy0*__12079
    __12150 = vy0*__12081
    __12151 = __12149 + __12150
    __12153 = uz0*__12079
    __12154 = vz0*__12081
    __12155 = __12153 + __12154
    __12177 = tm.cos(theta1)
    __12179 = tm.sin(theta1)
    __12183 = vy1*__12177
    __12184 = -(uy1*__12179)
    __12185 = __12183 + __12184
    __12188 = vz1*__12177
    __12189 = -(uz1*__12179)
    __12190 = __12188 + __12189
    __12178 = vx1*__12177
    __12180 = -(ux1*__12179)
    __12181 = __12178 + __12180
    __12204 = uy1*__12177
    __12205 = vy1*__12179
    __12206 = __12204 + __12205
    __12209 = uz1*__12177
    __12210 = vz1*__12179
    __12211 = __12209 + __12210
    __12200 = ux1*__12177
    __12201 = vx1*__12179
    __12202 = __12200 + __12201
    mf0 = -(2*kb1*(-omegaBar11 + 2*__12072*__12078*__12083 + 2*__12072*__12091*__12094 + 2*__12101*__12072*__12104)*(-2*__12109*__12110*__12078*__12083 + 2*__12072*__12089*__12094 - 2*__12109*__12110*__12091*__12094 - 2*__12101*__12109*__12110*__12104 + 2*__12053*__12072*__12104 + 2*__12072*__12078*(__12046*__12122*__12123*__12079 - __12046*__12130*__12123*__12081) + 2*__12072*__12091*(__12051*__12122*__12123*__12079 - __12051*__12130*__12123*__12081) + 2*__12101*__12072*(__12122*__12123*__12058*__12079 - __12130*__12123*__12058*__12081)) + 2*kb2*(-omegaBar12 - 2*__12072*__12078*__12147 - 2*__12072*__12091*__12151 - 2*__12101*__12072*__12155)*(2*__12109*__12110*__12078*__12147 - 2*__12072*__12089*__12151 + 2*__12109*__12110*__12091*__12151 + 2*__12101*__12109*__12110*__12155 - 2*__12053*__12072*__12155 - 2*__12072*__12078*(__12046*__12130*__12123*__12079 + __12046*__12122*__12123*__12081) - 2*__12072*__12091*(__12051*__12130*__12123*__12079 + __12051*__12122*__12123*__12081) - 2*__12101*__12072*(__12130*__12123*__12058*__12079 + __12122*__12123*__12058*__12081)) + 2*kb1*(-2*__12109*__12110*__12078*__12181 + 2*__12072*__12089*__12185 - 2*__12109*__12110*__12091*__12185 - 2*__12101*__12109*__12110*__12190 + 2*__12053*__12072*__12190)*(-omegaBar21 + 2*__12072*__12078*__12181 + 2*__12072*__12091*__12185 + 2*__12101*__12072*__12190) + 2*kb2*(2*__12109*__12110*__12078*__12202 - 2*__12072*__12089*__12206 + 2*__12109*__12110*__12091*__12206 + 2*__12101*__12109*__12110*__12211 - 2*__12053*__12072*__12211)*(-omegaBar22 - 2*__12072*__12078*__12202 - 2*__12072*__12091*__12206 - 2*__12101*__12072*__12211))/(4.*len)
    assert ti.abs(f[0]-mf0)<1e-10, f'Error when calculating bending force. Thoery: {mf0}, actual {f[0]}'

@ti.func
def twisting_force_test(f:ti.template(), x0:ti.template(), x1:ti.template(), x2:ti.template(), \
                        theta0:float, theta1:float, phi:float, undefTwist:float, kt:float, len:float):
    xi = x0[0]
    yi = x0[1]
    zi = x0[2]
    xj = x1[0]
    yj = x1[1]
    zj = x1[2]
    xk = x2[0]
    yk = x2[1]
    zk = x2[2]
    __55722 = -xj
    __55723 = xi + __55722
    __55725 = -yj
    __55726 = yi + __55725
    __55724 = __55723**2
    __55727 = __55726**2
    __55728 = -zj
    __55729 = zi + __55728
    __55730 = __55729**2
    __55731 = __55724 + __55727 + __55730
    __55733 = -xk
    __55734 = xj + __55733
    __55736 = -yk
    __55737 = yj + __55736
    __55742 = -zk
    __55743 = zj + __55742
    mf0 = -((kt*(-phi + theta0 - theta1 + undefTwist)*(yk*__55729 + yi*__55743 + yj*(-zi + zk)))/(len*tm.sqrt(__55731)*(__55723*__55734 + __55726*__55737 + tm.sqrt(__55731)*tm.sqrt(__55734**2 + __55737**2 + __55743**2) + __55729*__55743)))
    assert ti.abs(f[0]-mf0)<1e-10, f'Error when calculating twisting force. Thoery: {mf0}, actual {f[0]}'
